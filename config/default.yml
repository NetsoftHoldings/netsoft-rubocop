require:
  - ../lib/netsoft/rubocop/cops/netsoft/auth_http_positional_arguments
  - rubocop-rails
  - rubocop-performance
  - rubocop-rspec
  - rubocop-rake
  - rubocop-capybara
  - rubocop-factory_bot
  - rubocop-graphql

AllCops:
  TargetRubyVersion: 2.5
  TargetRailsVersion: 5.2
  DisplayStyleGuide: true
  StyleGuideBaseURL: https://rubystyle.guide
  NewCops: enable
  Exclude:
    - 'bin/**/*'
    - 'db/**/*'
    - 'coverage/**/*'
    - 'log/**/*'
    - 'public/**/*'
    - 'tmp/**/*'
    - 'spec/dummy/**/*'
    - 'vendor/**/*'
    - 'gemfiles/**/*'
    - 'node_modules/**/*'
    - '.pryrc'

# Checks that the gemspec has metadata to require MFA from RubyGems
# Irrelevant for internal gems
Gemspec/RequireMFA:
  Enabled: false

# region Layout
Layout/AssignmentIndentation:
  IndentationWidth: 2

Layout/ExtraSpacing:
  AllowForAlignment: true

Layout/HashAlignment:
  EnforcedHashRocketStyle: table
  EnforcedColonStyle: table

Layout/FirstArrayElementIndentation:
  EnforcedStyle: consistent

Layout/FirstHashElementIndentation:
  EnforcedStyle: consistent

Layout/LineContinuationSpacing:
  EnforcedStyle: no_space

Layout/SpaceInsideBlockBraces:
  EnforcedStyle: space
  SpaceBeforeBlockParameters: true

Layout/SpaceInsideHashLiteralBraces:
  EnforcedStyle: no_space
# endregion

# region Lint
Lint/AmbiguousBlockAssociation:
  Exclude:
    - spec/**/*

# Requires to change `foo + bar * baz` into `foo + (bar * baz)` for clarity. WHAT.
Lint/AmbiguousOperatorPrecedence:
  Enabled: false

# Prohibits ranges like 1.minute..5.minutes, and wants them to look like (1.minute)..(5.minutes)
# Please no.
Lint/AmbiguousRange:
  Enabled: false

Lint/NonDeterministicRequireOrder:
  Enabled: false

Lint/StructNewOverride:
  Enabled: false
#endregion

# region Naming
Naming/RescuedExceptionsVariableName:
  PreferredName: ex

Naming/MemoizedInstanceVariableName:
  EnforcedStyleForLeadingUnderscores: optional

Naming/MethodParameterName:
  AllowedNames:
    - at
    - by
    - db
    - id
    - in
    - io
    - ip
    - of
    - 'on'
    - os
    - pp
    - to
    - tz
    - my
    - me
    - ex
    - uo
    - up

Naming/PredicateName:
  # By default, it also forbids has_, but that's rarely a good suggestion:
  # is #has_screenshots? => #screenshots? better?..
  ForbiddenPrefixes:
    - is_

Naming/VariableNumber:
  Enabled: false
# endregion

# region Performance
# Wants to convert 0.to_d into BigDecimal.new('0'), which is ugly and doesn't actually do anything
# to "improve performance"
Performance/BigDecimalWithNumericArgument:
  Enabled: false

Performance/CollectionLiteralInLoop:
  Enabled: false

Performance/MethodObjectAsBlock:
  Enabled: false

# superseded by Performance/RgexpMatch
Performance/RedundantMatch:
  Enabled: false

Performance/BlockGivenWithExplicitBlock:
  Enabled: false

Performance/TimesMap:
  Enabled: false

# endregion

# region Rails
Rails:
  Enabled: true

# Requires to always use `I18n.t('foo.bar.baz')` instead of I18n.t(:baz, scope: [:foo, :bar])`
# because it is "easier to read".
# The latter is superior when scopes are dynamic, or just very long. Cop doesn't have a setting
# for one style or another, just always forces dots.
Rails/DotSeparatedKeys:
  Enabled: false

Rails/FilePath:
  EnforcedStyle: arguments

# We do it on a DB level
Rails/HasManyOrHasOneDependent:
  Enabled: false

Rails/HttpPositionalArguments:
  Enabled: false

Rails/HttpStatus:
  EnforcedStyle: numeric

# Forces _all_ strings to be in locales. Not gonna happen in any foreseeable future.
Rails/I18nLocaleTexts:
  Enabled: false


# The cop states that if you have `belongs_to :organization`, the validator is added automatically,
# so you don't need `validates :organization, presence: true` (or `validates :organization_id`).
#
# I (zverok) checked it on our codebase and it is not true. Should be clarified later, maybe our
# Rails version is too old?..
#
Rails/RedundantPresenceValidationOnBelongsTo:
  Enabled: false

Rails/SkipsModelValidations:
  AllowedMethods:
    - touch
    - update_attribute
    - update_counters
    - increment_counter
    - decrement_counter

Netsoft/AuthHttpPositionalArguments:
  Enabled: true
  Include:
    - 'spec/controllers/**/*'

# endregion

# region RSpec

# Prohibits before/after(:all) for ever uses. But when we use it, we know what we do
RSpec/BeforeAfterAll:
  Enabled: false

# Unnecessary formality to require replacing `eq true` with `be true`
# (for true, false and nil) because it is "stricter".
RSpec/BeEq:
  Enabled: false

RSpec/ExpectChange:
  EnforcedStyle: block

RSpec/ImplicitSubject:
  Enabled: false

# Just prohibits `let!` for any usages
# Nice try, Rubocop.
RSpec/LetSetup:
  Enabled: false

RSpec/MessageSpies:
  Enabled: false

# TODO: It would be good to set a realistic Max: once, but we have all kind of specs with multiple
# expectations now.
RSpec/MultipleExpectations:
  Enabled: false

# Allows to limit number of `let`s. What for?..
# NB: With current setting (5 max) we have... "Offense count: 22706"
RSpec/MultipleMemoizedHelpers:
  Enabled: false

RSpec/NamedSubject:
  Enabled: false

RSpec/NestedGroups:
  Enabled: false

RSpec/NotToNot:
  EnforcedStyle: to_not

# Wants metadata keys to be alphabetically sorted. Like, really?..
RSpec/SortMetadata:
  Enabled: false

# Same as for Rails/HttpStatus
RSpec/Rails/HttpStatus:
  EnforcedStyle: numeric

# endregion

# region Style

# Allows to enforce either this:
#
#   attr_reader :a
#   attr_reader :b
#
# (all accessors separate), or this:
#
#   attr_reader :a, :b
#
# (all accessors in one statement).
#
# We use both, and it is hard to tell why it should be limited...
Style/AccessorGrouping:
  Enabled: false

Style/AndOr:
  EnforcedStyle: conditionals

Style/BlockDelimiters:
  EnforcedStyle: semantic
  AllowBracesOnProceduralOneLiners: true

Style/CommentAnnotation:
  Enabled: false

# Asks to write comment besides dynamically evaluated method, showing how the code would look,
# see cop docs: https://docs.rubocop.org/rubocop/cops_style.html#styledocumentdynamicevaldefinition
#
# Ideally, would be cool, but lot of work.
Style/DocumentDynamicEvalDefinition:
  Enabled: false

Style/DoubleNegation:
  Enabled: false

# Requires to replace all (0..10).each { ... } with 10.times { ... }
# Not always the most expressive option.
Style/EachForSimpleLoop:
  Enabled: false

# Asks to write empty methods this way:
#
#    def foo; end
#
Style/EmptyMethod:
  Enabled: false

Style/FormatString:
  EnforcedStyle: percent

Style/FormatStringToken:
  Enabled: false

Style/HashAsLastArrayItem:
  EnforcedStyle: no_braces

Style/Lambda:
  EnforcedStyle: literal

# Forces to change `foo = val < 0 ? 0 : val` to `foo = [0, val].max`
# Proper readable change is actually `foo = val.clamp(0..)`, but there is no such option.
# The one with max/min produces weird-ish statements frequently, so it is better to wait for
# a clamp-ing cop or create it ourselves.
Style/MinMaxComparison:
  Enabled: false

Style/MultilineBlockChain:
  Enabled: false

# FIXME: This cop requires to attach .freeze to each and every constant.
# It is both ugly AND doesn't protect from bugs (the freeze is shallow, so some frozen CONFIG hash
# can still be changed).
# We need to develop our own .deep_freeze for configs, and cops to check that it is attached to
# hashes, arrays and values fetched from ENV/configs.
Style/MutableConstant:
  Enabled: false

# Allows them only in single-line blocks. Doesn't really help!
Style/NumberedParameters:
  Enabled: false

Style/NumberedParametersLimit:
  Max: 2

# Just prohibits OpenStruct forever. Technically reasonable, but when we use it, we know what we do
Style/OpenStructUse:
  Enabled: false

# Asks to change `"foo-bar": baz` to `'foo-bar': baz`. Lots of changes, little value
Style/QuotedSymbols:
  Enabled: false

Style/ParallelAssignment:
  Enabled: false

# Prohibits `::Foo` style constants unless strictly necessary. Reasonable, but glitches with
# autoloading/guessing from where to autoload.
Style/RedundantConstantBase:
  Enabled: false

Style/RescueModifier:
  Enabled: false

# Asks to avoid `rescue => exception` without particular class.
# Why?..
Style/RescueStandardError:
  Enabled: false

Style/SingleArgumentDig:
  Enabled: false

Style/StringConcatenation:
  Enabled: false

Style/StringLiterals:
  # up for debate
  Enabled: false

Style/StructInheritance:
  Enabled: false

Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: comma

Style/TrailingCommaInHashLiteral:
  EnforcedStyleForMultiline: comma

#endregion

Metrics:
  Enabled: false
